--- admin/siteconfig.py.orig	2009-11-12 16:49:42.000000000 +0100
+++ admin/siteconfig.py	2009-11-12 16:50:03.000000000 +0100
@@ -20,6 +20,7 @@
     'nis':     'reviewboard.accounts.backends.NISBackend',
     'ldap':    'reviewboard.accounts.backends.LDAPBackend',
     'ad':      'reviewboard.accounts.backends.ActiveDirectoryBackend',
+    'htpasswd':      'reviewboard.accounts.backends.HTPASSWDBackend',
 }
 
 
--- admin/forms.py.orig	2009-11-12 16:50:23.000000000 +0100
+++ admin/forms.py	2009-11-12 17:10:50.000000000 +0100
@@ -74,6 +74,7 @@
             ("ad",      _("Active Directory")),
             ("ldap",    _("LDAP")),
             ("nis",     _("NIS")),
+            ("htpasswd",     _("HTPASSWD")),
             ("custom",  _("Custom"))
         ),
         help_text=_("The method Review Board should use for authenticating "
--- templates/accounts/login.html.orig	2009-11-12 17:18:40.000000000 +0100
+++ templates/accounts/login.html	2009-11-12 17:21:19.000000000 +0100
@@ -18,9 +18,9 @@
 {%  endif %}
 {% else %}
 {%  box "important" %}
-<h1>{% trans "Log in with your standard username and password" %}</h1>
+<h1>{% trans "Log in with your username and password from " %}<a href="https://dev.covide.nl/trac/">https://dev.covide.nl/trac/</a></h1>
  <p>
- {% blocktrans %}There's no need to register a new account. Your standard username and password should work fine.{% endblocktrans %}
+ {% blocktrans %}ReviewBoard uses the same user accounts as the Covide trac environment. You must have an account on <a href="https://dev.covide.nl/trac/">https://dev.covide.nl/trac/</a> to log in.{% endblocktrans %}
  </p>
 {%  endbox %}
 {% endifequal %}
--- accounts/backends.py.orig	2009-11-12 16:47:45.000000000 +0100
+++ accounts/backends.py	2009-11-12 17:14:43.000000000 +0100
@@ -4,6 +4,38 @@
 import logging
 import sys
 
+class HTPASSWDBackend:
+
+    def authenticate(self, username, password):
+        import crypt
+        lines = [l.rstrip().split(':', 1) for l in file('/var/storage/linux/www/covide.nl/dev/configs/htpasswd').readlines()]
+        lines = [l for l in lines if l[0] == username]
+        if lines:
+            hashedPassword = lines[0][1]
+            newpassword = crypt.crypt(password, hashedPassword[:2])
+            if hashedPassword == newpassword:
+                return self.get_or_create_user(username)
+
+    def get_or_create_user(self, username):
+        try:
+            user = User.objects.get(username=username)
+        except User.DoesNotExist:
+            try:
+                user = User(username=username,
+                            password='',
+                            first_name='',
+                            last_name='',
+                            email='')
+                user.is_staff = False
+                user.is_superuser = False
+                user.set_unusable_password()
+                user.save()
+            except :
+                pass
+        return user
+
+    def get_user(self, user_id):
+        return get_object_or_none(User, pk=user_id)
 
 class NISBackend:
     """Authenticate against a user on an NIS server."""
